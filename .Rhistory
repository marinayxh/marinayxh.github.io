install.packages("ElemStatLearn")
library('ElemStatLearn')
install.packages('ElemStatLearn')
install.packages("ElemStatLearn")
library('ElemStatLearn')
## load prostate data
data("prostate")
## subset to training examples
prostate_train <- subset(prostate, train=TRUE)
plot_psa_data <- function(dat=prostate_train) {
plot(dat$lpsa, dat$lcavol,
xlab="log Prostate Screening Antigen (psa)",
ylab="log Cancer Volume (lcavol)")
}
plot_psa_data()
L2_loss <- function(y, yhat)
(y-yhat)^2
fit_lin <- function(y, x, loss=L2_loss, beta_init = c(-0.51, 0.75)) {
err <- function(beta)
mean(loss(y,  beta[1] + beta[2]*x))
beta <- optim(par = beta_init, fn = err)
return(beta)
}
predict_lin <- function(x, beta)
beta[1] + beta[2]*x
lin_beta <- fit_lin(y=prostate_train$lcavol,
x=prostate_train$lpsa,
loss=L2_loss)
x_grid <- seq(min(prostate_train$lpsa),
max(prostate_train$lpsa),
length.out=100)
lin_pred <- predict_lin(x=x_grid, beta=lin_beta$par)
plot_psa_data()
lines(x=x_grid, y=lin_pred)
install.packages("manipulate")
library('MASS')
library('manipulate')
y <- mcycle$accel
x <- mcycle$times
plot(x, y,
xlab="Time (ms)",
ylab="Acceleration (g)")
fit_ss <- smooth.spline(x, y, lambda=1)
x_plot <- seq(min(x),max(x),length.out=1000)
y_hat_plot <- predict(fit_ss, x_plot)$y
plot(x, y,
xlab="Time (ms)",
ylab="Acceleration (g)",
main="Smoothing Spline Fit")
lines(x_plot, y_hat_plot, col="#882255", lwd=2)
legend('topleft',paste0("lambda = ", fit_ss$lambda), bty='n')
manipulate({
fit_ss <- smooth.spline(x, y, lambda=lambda.slider)
x_plot <- seq(min(x),max(x),length.out=1000)
y_hat_plot <- predict(fit_ss, x_plot)$y
plot(x, y,
xlab="Time (ms)",
ylab="Acceleration (g)",
main="Smoothing Spline Fit")
lines(x_plot, y_hat_plot, col="#882255", lwd=2)
legend('topleft',paste0("lambda = ", fit_ss$lambda), bty='n')
},
lambda.slider = slider(0,0.01,1e-3,label='lambda'))
manipulate({
fit_ss <- smooth.spline(x, y, lambda=lambda.slider)
x_plot <- seq(min(x),max(x),length.out=1000)
y_hat_plot <- predict(fit_ss, x_plot)$y
plot(x, y,
xlab="Time (ms)",
ylab="Acceleration (g)",
main="Smoothing Spline Fit")
lines(x_plot, y_hat_plot, col="#882255", lwd=2)
legend('topleft',paste0("lambda = ", fit_ss$lambda), bty='n')
},
lambda.slider = slider(0,0.01,1e-3,label='lambda'))
